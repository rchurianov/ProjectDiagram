/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

//import javax.swing.JTabbedPane;
//import javax.swing.ImageIcon;
//import javax.swing.JLabel;
//import javax.swing.JPanel;
//import javax.swing.JFrame;
//import javax.swing.JComponent;
//import javax.swing.SwingUtilities;
//import javax.swing.UIManager;
//import java.awt.BorderLayout;
//import java.awt.Dimension;
//import java.awt.GridLayout;
//import java.awt.event.KeyEvent;
import javax.swing.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import gui.Tasks;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Roma
 *
 */
public class DiagramFrame extends JFrame {

    /**
     * Creates new form DiagramFrame
     */
    public DiagramFrame() {
        super();
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        TestDBPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("TestDBPU").createEntityManager();
        tasksQuery = java.beans.Beans.isDesignTime() ? null : TestDBPUEntityManager.createQuery("SELECT t FROM Tasks t");
        tasksList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : tasksQuery.getResultList();
        DiagramTabbedPane = new javax.swing.JTabbedPane();
        DiagramTab = new javax.swing.JPanel();
        ShowDataButton = new javax.swing.JButton();
        DataScrollPane = new javax.swing.JScrollPane();
        DataTable = new javax.swing.JTable();
        InfoTab = new javax.swing.JPanel();
        DiagramMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewProjectMenuItem = new javax.swing.JMenuItem();
        InfoMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ShowDataButton.setText("Show Data");
        ShowDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowDataButtonActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tasksList, DataTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${taskName}"));
        columnBinding.setColumnName("Task Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${startDate}"));
        columnBinding.setColumnName("Start Date");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dueDate}"));
        columnBinding.setColumnName("Due Date");
        columnBinding.setColumnClass(java.util.Date.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        DataScrollPane.setViewportView(DataTable);

        javax.swing.GroupLayout DiagramTabLayout = new javax.swing.GroupLayout(DiagramTab);
        DiagramTab.setLayout(DiagramTabLayout);
        DiagramTabLayout.setHorizontalGroup(
            DiagramTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DiagramTabLayout.createSequentialGroup()
                .addGroup(DiagramTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DiagramTabLayout.createSequentialGroup()
                        .addGap(377, 377, 377)
                        .addComponent(ShowDataButton))
                    .addGroup(DiagramTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DataScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(494, Short.MAX_VALUE))
        );
        DiagramTabLayout.setVerticalGroup(
            DiagramTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DiagramTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DataScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ShowDataButton)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        DiagramTabbedPane.addTab("Project Diagram", DiagramTab);

        javax.swing.GroupLayout InfoTabLayout = new javax.swing.GroupLayout(InfoTab);
        InfoTab.setLayout(InfoTabLayout);
        InfoTabLayout.setHorizontalGroup(
            InfoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        InfoTabLayout.setVerticalGroup(
            InfoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        DiagramTabbedPane.addTab("Executor Info", InfoTab);

        FileMenu.setText("File");

        NewProjectMenuItem.setText("New Project");
        FileMenu.add(NewProjectMenuItem);

        DiagramMenuBar.add(FileMenu);

        InfoMenu.setText("Info");
        DiagramMenuBar.add(InfoMenu);

        setJMenuBar(DiagramMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DiagramTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(DiagramTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowDataButtonActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_ShowDataButtonActionPerformed
        // TODO add your handling code here:
        //connect and query a database
    }//GEN-LAST:event_ShowDataButtonActionPerformed

    //<editor-fold defaultstate="collapsed">
     /* public void connectToAndQueryDatabase(String username, String password)
     * throws SQLException {
     *
     * Connection con = DriverManager.getConnection(
     * "jdbc:derby:C:/Users/Roma/IdeaProjects/TestDB", username, password);
     *
     * Statement stmt = con.createStatement(); ResultSet rs =
     * stmt.executeQuery("SELECT * FROM PROJECTS");
     *
     *
     * if (rs.next()) { int x = rs.getInt("ID"); String s =
     * rs.getString("Name"); java.sql.Date d = rs.getDate("DueDate"); s = x + s
     * + d.toString(); //DataTextArea.setText(s); //DataTable.
     * //System.out.format("%d %s %s", x, s, d); } con.close(); }
    */
     //</editor-fold>

    public static Connection connectToDatabase(String username, String password)
            throws SQLException {

        Connection con = DriverManager.getConnection(
                "jdbc:derby:C:/Users/Roma/IdeaProjects/TestDB",
                username,
                password);
        return con;
        //<editor-fold defaultstate="collapsed" desc="Some data read commented">
        /*
         *
         *
         * Statement stmt = con.createStatement(); ResultSet rs =
         * stmt.executeQuery("SELECT * FROM PROJECTS");
         *
         * if (rs.next()) { int x = rs.getInt("ID"); String s =
         * rs.getString("Name"); java.sql.Date d = rs.getDate("DueDate"); s = x
         * + s + d.toString(); //DataTextArea.setText(s); //DataTable.
         * //System.out.format("%d %s %s", x, s, d); } con.close();
         */
        //</editor-fold>
    }

    public DefaultTableModel buildTableModel(ResultSet rs)
            throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new DefaultTableModel(data, columnNames);

    }

    public void PopulateDataTable(ResultSet rs) throws SQLException {
        DataTable = new JTable(buildTableModel(rs));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagramFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagramFrame df = new DiagramFrame();
                df.setVisible(true);
                try {
                    Connection c = connectToDatabase("", "");
                    Statement stmt = c.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT * FROM TASKS");
                    df.PopulateDataTable(rs);

                    df.addWindowListener(new WindowListener() {
                        @Override
                        public void windowClosing(WindowEvent e) {
                            if(JOptionPane.showConfirmDialog(df, "Are you sure ?") == JOptionPane.OK_OPTION){
                            df.setVisible(false);
                            df.dispose();
                        }
                    }

                        @Override
                        public void windowOpened(WindowEvent e) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void windowClosed(WindowEvent e) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void windowIconified(WindowEvent e) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void windowDeiconified(WindowEvent e) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void windowActivated(WindowEvent e) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void windowDeactivated(WindowEvent e) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                    });
                } catch (SQLException ex) {
                    Logger.getLogger(DiagramFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                //df.createTabbedPane();
            }
        });
    }

    //<editor-fold defaultstate="collapsed">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane DataScrollPane;
    private javax.swing.JTable DataTable;
    private javax.swing.JMenuBar DiagramMenuBar;
    private javax.swing.JPanel DiagramTab;
    private javax.swing.JTabbedPane DiagramTabbedPane;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu InfoMenu;
    private javax.swing.JPanel InfoTab;
    private javax.swing.JMenuItem NewProjectMenuItem;
    private javax.swing.JButton ShowDataButton;
    private javax.persistence.EntityManager TestDBPUEntityManager;
    private java.util.List<gui.Tasks> tasksList;
    private javax.persistence.Query tasksQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
